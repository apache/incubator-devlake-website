"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[84310],{58108:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var n=a(87462),l=(a(67294),a(3905));a(61839);const r={title:"Customize",description:"Customize Plugin\n"},i=void 0,p={unversionedId:"Plugins/customize",id:"Plugins/customize",title:"Customize",description:"Customize Plugin\n",source:"@site/docs/Plugins/customize.md",sourceDirName:"Plugins",slug:"/Plugins/customize",permalink:"/docs/Plugins/customize",draft:!1,editUrl:"https://github.com/apache/incubator-devlake-website/edit/main/docs/Plugins/customize.md",tags:[],version:"current",frontMatter:{title:"Customize",description:"Customize Plugin\n"},sidebar:"docsSidebar",previous:{title:"CircleCI",permalink:"/docs/Plugins/circleci"},next:{title:"DBT",permalink:"/docs/Plugins/dbt"}},m={},u=[{value:"Summary",id:"summary",level:2},{value:"Sample Request",id:"sample-request",level:2},{value:"Trigger Data Extraction",id:"trigger-data-extraction",level:3},{value:"List Columns",id:"list-columns",level:3},{value:"Create a Customized Column",id:"create-a-customized-column",level:3},{value:"Drop A Column",id:"drop-a-column",level:3},{value:"Upload <code>issues.csv</code> file",id:"upload-issuescsv-file",level:3},{value:"Upload <code>issue_commits.csv</code> file",id:"upload-issue_commitscsv-file",level:3},{value:"Upload <code>issue_repo_commits.csv</code> file",id:"upload-issue_repo_commitscsv-file",level:3},{value:"API Description",id:"api-description",level:4},{value:"Request",id:"request",level:4},{value:"Responses",id:"responses",level:4},{value:"CSV Format",id:"csv-format",level:4},{value:"Upload <code>sprints.csv</code> file",id:"upload-sprintscsv-file",level:3},{value:"Upload <code>issue_worklogs.csv</code> file",id:"upload-issue_worklogscsv-file",level:3},{value:"Upload <code>issue_changelogs.csv</code> file",id:"upload-issue_changelogscsv-file",level:3},{value:"Upload <code>qa_apis.csv</code> file",id:"upload-qa_apiscsv-file",level:3},{value:"qa_apis.csv sample:",id:"qa_apiscsv-sample",level:4},{value:"Upload <code>qa_test_cases.csv</code> file",id:"upload-qa_test_casescsv-file",level:3},{value:"qa_test_cases.csv sample:",id:"qa_test_casescsv-sample",level:4},{value:"Upload <code>qa_test_case_executions.csv</code> file",id:"upload-qa_test_case_executionscsv-file",level:3},{value:"qa_test_case_executions.csv sample:",id:"qa_test_case_executionscsv-sample",level:4}],d={toc:u};function s(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"This plugin provides users the ability to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Add/delete columns in domain layer tables"),(0,l.kt)("li",{parentName:"ul"},"Insert values to certain columns with data extracted from some raw layer tables"),(0,l.kt)("li",{parentName:"ul"},"Import data from CSV files(only ",(0,l.kt)("inlineCode",{parentName:"li"},"issues"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_commits"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_repo_commits"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"sprints"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_worklogs"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_changelogs"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"qa_apis"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"qa_test_cases")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"qa_test_case_executions")," tables are supported)")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")," The names of columns added via this plugin must start with the prefix ",(0,l.kt)("inlineCode",{parentName:"p"},"x_")),(0,l.kt)("p",null,"For now, only the following six types are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"varchar(255)"),(0,l.kt)("li",{parentName:"ul"},"text"),(0,l.kt)("li",{parentName:"ul"},"bigint"),(0,l.kt)("li",{parentName:"ul"},"float"),(0,l.kt)("li",{parentName:"ul"},"timestamp"),(0,l.kt)("li",{parentName:"ul"},"array")),(0,l.kt)("h2",{id:"sample-request"},"Sample Request"),(0,l.kt)("h3",{id:"trigger-data-extraction"},"Trigger Data Extraction"),(0,l.kt)("p",null,"To extract data, switch to ",(0,l.kt)("inlineCode",{parentName:"p"},"Advanced Mode")," on the first step of creating a Blueprint and paste a JSON config as the following:"),(0,l.kt)("p",null,"The example below demonstrates how to extract status name from the table ",(0,l.kt)("inlineCode",{parentName:"p"},"_raw_jira_api_issues"),":"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"For non-array types: Extract the status name from the ",(0,l.kt)("inlineCode",{parentName:"li"},"_raw_jira_api_issues")," table and assign it to the ",(0,l.kt)("inlineCode",{parentName:"li"},"x_test")," column in the ",(0,l.kt)("a",{parentName:"li",href:"/docs/DataModels/DevLakeDomainLayerSchema#issues"},"issues")," table."),(0,l.kt)("li",{parentName:"ol"},"For array types: Extract the status name from the ",(0,l.kt)("inlineCode",{parentName:"li"},"_raw_jira_api_issues")," table, and create a new ",(0,l.kt)("a",{parentName:"li",href:"/docs/DataModels/DevLakeDomainLayerSchema#issue_custom_array_fields"},"issue_custom_array_fields")," table containing ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_id"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"field_id"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," columns. This table has a one-to-many relationship with the ",(0,l.kt)("inlineCode",{parentName:"li"},"issues")," table. ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_id")," is the id corresponding to the issue, ",(0,l.kt)("inlineCode",{parentName:"li"},"x_test")," corresponds to the ",(0,l.kt)("inlineCode",{parentName:"li"},"field_id")," column, and the value of ",(0,l.kt)("inlineCode",{parentName:"li"},"x_test")," corresponds to the ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," column.")),(0,l.kt)("p",null,"We leverage the package ",(0,l.kt)("inlineCode",{parentName:"p"},"https://github.com/tidwall/gjson")," to extract value from the JSON. For the extraction syntax, please refer to this ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tidwall/gjson/blob/master/SYNTAX.md"},"docs")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"table"),": domain layer table name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rawDataTable"),": raw layer table, from which we extract values by json path"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rawDataParams"),": the filter to select records from the raw layer table (",(0,l.kt)("strong",{parentName:"li"},"The value should be a string not an object"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mapping"),": the extraction rule; the key is the extension field name; the value is json path")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  [\n    {\n      "plugin":"customize",\n      "options":{\n        "transformationRules":[\n          {\n            "table":"issues", \n            "rawDataTable":"_raw_jira_api_issues", \n            "rawDataParams":"{\\"ConnectionId\\":1,\\"BoardId\\":8}", \n            "mapping":{\n              "x_test":"fields.status.name" \n            }\n          }\n        ]\n      }\n    }\n  ]\n]\n')),(0,l.kt)("p",null,"You can also trigger data extraction by making a POST request to ",(0,l.kt)("inlineCode",{parentName:"p"},"/pipelines"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl \'http://localhost:8080/pipelines\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'\n{\n    "name": "extract fields",\n    "plan": [\n        [\n            {\n                "plugin": "customize",\n                "options": {\n                    "transformationRules": [\n                        {\n                            "table": "issues",\n                            "rawDataTable": "_raw_jira_api_issues",\n                            "rawDataParams": "{\\"ConnectionId\\":1,\\"BoardId\\":8}",\n                            "mapping": {\n                                "x_test": "fields.status.name"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    ]\n}\n\'\n')),(0,l.kt)("h3",{id:"list-columns"},"List Columns"),(0,l.kt)("p",null,"Get all columns of the table ",(0,l.kt)("inlineCode",{parentName:"p"},"issues")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"GET /plugins/customize/issues/fields")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE")," some fields are omitted in the following example\nresponse"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "columnName": "id",\n    "displayName": "",\n    "dataType": "varchar(255)",\n    "description": ""\n  },\n  {\n    "columnName": "created_at",\n    "displayName": "",\n    "dataType": "datetime(3)",\n    "description": ""\n  },\n  {\n    "columnName": "x_time",\n    "displayName": "time",\n    "dataType": "timestamp",\n    "description": "test for time"\n  },\n  {\n    "columnName": "x_int",\n    "displayName": "bigint",\n    "dataType": "bigint",\n    "description": "test for int"\n  },\n  {\n    "columnName": "x_float",\n    "displayName": "float",\n    "dataType": "float",\n    "description": "test for float"\n  },\n  {\n    "columnName": "x_text",\n    "displayName": "text",\n    "dataType": "text",\n    "description": "test for text"\n  },\n  {\n    "columnName": "x_varchar",\n    "displayName": "varchar",\n    "dataType": "varchar(255)",\n    "description": "test for varchar"\n  }\n]\n\n')),(0,l.kt)("h3",{id:"create-a-customized-column"},"Create a Customized Column"),(0,l.kt)("p",null,"Create a new column ",(0,l.kt)("inlineCode",{parentName:"p"},"x_abc")," with datatype ",(0,l.kt)("inlineCode",{parentName:"p"},"varchar(255)")," for the table ",(0,l.kt)("inlineCode",{parentName:"p"},"issues"),"."),(0,l.kt)("p",null,"The value of ",(0,l.kt)("inlineCode",{parentName:"p"},"columnName")," must start with ",(0,l.kt)("inlineCode",{parentName:"p"},"x_")," and consist of no more than 50 alphanumerics and underscores.\nThe value of field ",(0,l.kt)("inlineCode",{parentName:"p"},"dataType")," must be one of the following 5 types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"varchar(255)"),(0,l.kt)("li",{parentName:"ul"},"text"),(0,l.kt)("li",{parentName:"ul"},"bigint"),(0,l.kt)("li",{parentName:"ul"},"float"),(0,l.kt)("li",{parentName:"ul"},"timestamp ")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/issues/fields"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columnName": "x_abc",\n  "displayName": "ABC",\n  "dataType": "varchar(255)",\n  "description": "test field"\n}\n'))),(0,l.kt)("h3",{id:"drop-a-column"},"Drop A Column"),(0,l.kt)("p",null,"Drop the column ",(0,l.kt)("inlineCode",{parentName:"p"},"x_text")," of the table ",(0,l.kt)("inlineCode",{parentName:"p"},"issues")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"DELETE /plugins/customize/issues/fields/x_test")),(0,l.kt)("h3",{id:"upload-issuescsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"issues.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/issues.csv")),(0,l.kt)("p",null,"The HTTP ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," must be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have four fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file to upload"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardId"),": It will be written to the ",(0,l.kt)("inlineCode",{parentName:"li"},"id")," field of the ",(0,l.kt)("inlineCode",{parentName:"li"},"boards")," table, the ",(0,l.kt)("inlineCode",{parentName:"li"},"board_id")," field of ",(0,l.kt)("inlineCode",{parentName:"li"},"board_issues"),", and the ",(0,l.kt)("inlineCode",{parentName:"li"},"_raw_data_params")," field of ",(0,l.kt)("inlineCode",{parentName:"li"},"issues")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardName"),": It will be written to the ",(0,l.kt)("inlineCode",{parentName:"li"},"name")," field of the ",(0,l.kt)("inlineCode",{parentName:"li"},"boards")," table"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Whether to import incrementally (default: false)")),(0,l.kt)("p",null,"Upload a CSV file and import it to the ",(0,l.kt)("inlineCode",{parentName:"p"},"issues")," table via this API. There should be no extra fields in the file except the ",(0,l.kt)("inlineCode",{parentName:"p"},"labels")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"sprint_ids")," fields, and if the field value is ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),", it should be ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," in the CSV instead of the empty string."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"sprint_ids"),' field should contain comma-separated sprint IDs (e.g. "sprint1,sprint2")'),(0,l.kt)("li",{parentName:"ul"},"These values will be automatically written to the ",(0,l.kt)("inlineCode",{parentName:"li"},"sprint_issues")," table during import\nDevLake will parse the CSV file and store it in the ",(0,l.kt)("inlineCode",{parentName:"li"},"issues")," table, where the ",(0,l.kt)("inlineCode",{parentName:"li"},"labels")," are stored in the ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_labels")," table.\nIf the ",(0,l.kt)("inlineCode",{parentName:"li"},"boardId")," does not appear, a new record will be created in the boards table. The ",(0,l.kt)("inlineCode",{parentName:"li"},"board_issues")," table will be updated at the same time as the import.\nThe following is an issues.CSV file sample:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"_raw_data_params"),(0,l.kt)("th",{parentName:"tr",align:null},"url"),(0,l.kt)("th",{parentName:"tr",align:null},"icon_url"),(0,l.kt)("th",{parentName:"tr",align:null},"issue_key"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"description"),(0,l.kt)("th",{parentName:"tr",align:null},"epic_key"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"original_status"),(0,l.kt)("th",{parentName:"tr",align:null},"story_point"),(0,l.kt)("th",{parentName:"tr",align:null},"resolution_date"),(0,l.kt)("th",{parentName:"tr",align:null},"created_date"),(0,l.kt)("th",{parentName:"tr",align:null},"updated_date"),(0,l.kt)("th",{parentName:"tr",align:null},"parent_issue_id"),(0,l.kt)("th",{parentName:"tr",align:null},"priority"),(0,l.kt)("th",{parentName:"tr",align:null},"original_estimate_minutes"),(0,l.kt)("th",{parentName:"tr",align:null},"time_spent_minutes"),(0,l.kt)("th",{parentName:"tr",align:null},"time_remaining_minutes"),(0,l.kt)("th",{parentName:"tr",align:null},"creator_id"),(0,l.kt)("th",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("th",{parentName:"tr",align:null},"assignee_id"),(0,l.kt)("th",{parentName:"tr",align:null},"assignee_name"),(0,l.kt)("th",{parentName:"tr",align:null},"severity"),(0,l.kt)("th",{parentName:"tr",align:null},"component"),(0,l.kt)("th",{parentName:"tr",align:null},"lead_time_minutes"),(0,l.kt)("th",{parentName:"tr",align:null},"original_project"),(0,l.kt)("th",{parentName:"tr",align:null},"original_type"),(0,l.kt)("th",{parentName:"tr",align:null},"x_int"),(0,l.kt)("th",{parentName:"tr",align:null},"x_time"),(0,l.kt)("th",{parentName:"tr",align:null},"x_varchar"),(0,l.kt)("th",{parentName:"tr",align:null},"x_float"),(0,l.kt)("th",{parentName:"tr",align:null},"labels"),(0,l.kt)("th",{parentName:"tr",align:null},"sprint_ids"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketIssue:1:1"),(0,l.kt)("td",{parentName:"tr",align:null},"board789"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/1"},"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/1")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket issues test for devlake"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"issue"),(0,l.kt)("td",{parentName:"tr",align:null},"TODO"),(0,l.kt)("td",{parentName:"tr",align:null},"new"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-07-17 07:15:55.959+00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-07-17 09:11:42.656+00:00"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"major"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-09-15 15:27:56"),(0,l.kt)("td",{parentName:"tr",align:null},"world"),(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"sprint1,sprint2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketIssue:1:10"),(0,l.kt)("td",{parentName:"tr",align:null},"board789"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/10"},"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/10")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test007"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test007"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"issue"),(0,l.kt)("td",{parentName:"tr",align:null},"TODO"),(0,l.kt)("td",{parentName:"tr",align:null},"new"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-12 13:43:00.783+00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-12 13:43:00.783+00:00"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"trivial"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"30"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-09-15 15:27:56"),(0,l.kt)("td",{parentName:"tr",align:null},"abc"),(0,l.kt)("td",{parentName:"tr",align:null},"2456790"),(0,l.kt)("td",{parentName:"tr",align:null},"hello worlds"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketIssue:1:13"),(0,l.kt)("td",{parentName:"tr",align:null},"board789"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/13"},"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/13")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"13"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test010"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test010"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"issue"),(0,l.kt)("td",{parentName:"tr",align:null},"TODO"),(0,l.kt)("td",{parentName:"tr",align:null},"new"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-12 13:44:46.508+00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-12 13:44:46.508+00:00"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"critical"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-09-15 15:27:56"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"0.00014"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketIssue:1:14"),(0,l.kt)("td",{parentName:"tr",align:null},"board789"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/14"},"https://api.bitbucket.org/2.0/repositories/thenicetgp/lake/issues/14")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"14"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test011"),(0,l.kt)("td",{parentName:"tr",align:null},"issue test011"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"issue"),(0,l.kt)("td",{parentName:"tr",align:null},"TODO"),(0,l.kt)("td",{parentName:"tr",align:null},"new"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-12 13:45:12.810+00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-12 13:45:12.810+00:00"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"blocker"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null},"bitbucket:BitbucketAccount:1:62abf394192edb006fa0e8cf"),(0,l.kt)("td",{parentName:"tr",align:null},"tgp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"41534568464351"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-09-15 15:27:56"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"label1,label2,label3"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"upload-issue_commitscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"issue_commits.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/issue_commits.csv")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," should be  ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have two fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardId"),": It will be written to the ",(0,l.kt)("inlineCode",{parentName:"li"},"_raw_data_params")," field of ",(0,l.kt)("inlineCode",{parentName:"li"},"issue_commits"))),(0,l.kt)("p",null,"The following is an issue_commits.CSV file sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"issue_id"),(0,l.kt)("th",{parentName:"tr",align:null},"commit_sha"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10063"),(0,l.kt)("td",{parentName:"tr",align:null},"8748a066cbaf67b15e86f2c636f9931347e987cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10064"),(0,l.kt)("td",{parentName:"tr",align:null},"e6bde456807818c5c78d7b265964d6d48b653af6")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10065"),(0,l.kt)("td",{parentName:"tr",align:null},"8f91020bcf684c6ad07adfafa3d8a2f826686c42")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10066"),(0,l.kt)("td",{parentName:"tr",align:null},"0dfe2e9ed88ad4e27f825d9b67d4d56ac983c5ef")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10145"),(0,l.kt)("td",{parentName:"tr",align:null},"07aa2ebed68e286dc51a7e0082031196a6135f74")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10145"),(0,l.kt)("td",{parentName:"tr",align:null},"d70d6687e06304d9b6e0cb32b3f8c0f0928400f7")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10159"),(0,l.kt)("td",{parentName:"tr",align:null},"d28785ff09229ac9e3c6734f0c97466ab00eb4da")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10202"),(0,l.kt)("td",{parentName:"tr",align:null},"0ab12c4d4064003602edceed900d1456b6209894")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10203"),(0,l.kt)("td",{parentName:"tr",align:null},"980e9fe7bc3e22a0409f7241a024eaf9c53680dd")))),(0,l.kt)("h3",{id:"upload-issue_repo_commitscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"issue_repo_commits.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/issue_repo_commits.csv")),(0,l.kt)("h4",{id:"api-description"},"API Description"),(0,l.kt)("p",null,"Upload issue_repo_commits.csv file to import issue-repo commit relationships into DevLake."),(0,l.kt)("h4",{id:"request"},"Request"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Content-Type"),": multipart/form-data"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters"),":"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardId")," (required): The ID of the board"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental")," (optional): Whether to import incrementally (default: false)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," (required): The CSV file to upload")),(0,l.kt)("h4",{id:"responses"},"Responses"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"200"),": Success"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"400"),": Bad Request"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"500"),": Internal Server Error")),(0,l.kt)("h4",{id:"csv-format"},"CSV Format"),(0,l.kt)("p",null,"The CSV file should contain the following columns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"issue_id"),(0,l.kt)("th",{parentName:"tr",align:null},"repo_url"),(0,l.kt)("th",{parentName:"tr",align:null},"commit_sha"),(0,l.kt)("th",{parentName:"tr",align:null},"host"),(0,l.kt)("th",{parentName:"tr",align:null},"namespace"),(0,l.kt)("th",{parentName:"tr",align:null},"repo_name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10063"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/apache/devlake.git"},"https://github.com/apache/devlake.git")),(0,l.kt)("td",{parentName:"tr",align:null},"8748a066cbaf67b15e86f2c636f9931347e987cf"),(0,l.kt)("td",{parentName:"tr",align:null},"github.com"),(0,l.kt)("td",{parentName:"tr",align:null},"apache"),(0,l.kt)("td",{parentName:"tr",align:null},"devlake")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10064"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/apache/devlake.git"},"https://github.com/apache/devlake.git")),(0,l.kt)("td",{parentName:"tr",align:null},"e6bde456807818c5c78d7b265964d6d48b653af6"),(0,l.kt)("td",{parentName:"tr",align:null},"github.com"),(0,l.kt)("td",{parentName:"tr",align:null},"apache"),(0,l.kt)("td",{parentName:"tr",align:null},"devlake")))),(0,l.kt)("h3",{id:"upload-sprintscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"sprints.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/sprints.csv")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," should be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have three fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file to upload"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardId"),": The ID of the board"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Whether to import incrementally (default: false)")),(0,l.kt)("p",null,"The following is a sprints.CSV file sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"url"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"start_date"),(0,l.kt)("th",{parentName:"tr",align:null},"ended_date"),(0,l.kt)("th",{parentName:"tr",align:null},"completed_date"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sprint1"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://jira.example.com/sprint/1"},"https://jira.example.com/sprint/1")),(0,l.kt)("td",{parentName:"tr",align:null},"ACTIVE"),(0,l.kt)("td",{parentName:"tr",align:null},"Sprint 1"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-01 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-14 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sprint2"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://jira.example.com/sprint/2"},"https://jira.example.com/sprint/2")),(0,l.kt)("td",{parentName:"tr",align:null},"CLOSED"),(0,l.kt)("td",{parentName:"tr",align:null},"Sprint 2"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-15 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-28 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-28 12:00:00")))),(0,l.kt)("h3",{id:"upload-issue_worklogscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"issue_worklogs.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/issue_worklogs.csv")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," should be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have three fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file to upload"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardId"),": The ID of the board"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Whether to import incrementally (default: false)")),(0,l.kt)("p",null,"The following is an issue_worklogs.CSV file sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"issue_id"),(0,l.kt)("th",{parentName:"tr",align:null},"author_name (will create account record)"),(0,l.kt)("th",{parentName:"tr",align:null},"time_spent_minutes"),(0,l.kt)("th",{parentName:"tr",align:null},"started_date"),(0,l.kt)("th",{parentName:"tr",align:null},"logged_date"),(0,l.kt)("th",{parentName:"tr",align:null},"comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10063"),(0,l.kt)("td",{parentName:"tr",align:null},"John Doe"),(0,l.kt)("td",{parentName:"tr",align:null},"120"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-01 09:30:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-01 10:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"Initial investigation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10064"),(0,l.kt)("td",{parentName:"tr",align:null},"Jane Smith"),(0,l.kt)("td",{parentName:"tr",align:null},"60"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-02 14:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-02 14:30:00"),(0,l.kt)("td",{parentName:"tr",align:null},"Bug fixing")))),(0,l.kt)("h3",{id:"upload-issue_changelogscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"issue_changelogs.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/issue_changelogs.csv")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," should be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have three fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file to upload"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boardId"),": The ID of the board"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Whether to import incrementally (default: false)")),(0,l.kt)("p",null,"The following is an issue_changelogs.CSV file sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"issue_id"),(0,l.kt)("th",{parentName:"tr",align:null},"author_name (will create account record)"),(0,l.kt)("th",{parentName:"tr",align:null},"field_name"),(0,l.kt)("th",{parentName:"tr",align:null},"original_from_value"),(0,l.kt)("th",{parentName:"tr",align:null},"original_to_value"),(0,l.kt)("th",{parentName:"tr",align:null},"created_date"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10063"),(0,l.kt)("td",{parentName:"tr",align:null},"John Doe"),(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"Open"),(0,l.kt)("td",{parentName:"tr",align:null},"In Progress"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-01 09:00:00")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"jira:JiraIssue:1:10063"),(0,l.kt)("td",{parentName:"tr",align:null},"John Doe"),(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"In Progress"),(0,l.kt)("td",{parentName:"tr",align:null},"Done"),(0,l.kt)("td",{parentName:"tr",align:null},"2022-01-03 17:00:00")))),(0,l.kt)("h3",{id:"upload-qa_apiscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"qa_apis.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/qa_apis.csv")),(0,l.kt)("p",null,"The HTTP ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," must be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have three fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"qaProjectId"),": It will be used as qa_project_id for the imported data"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Boolean value indicating whether this is an incremental update (true/false)")),(0,l.kt)("p",null,"Upload a CSV file and import it to the ",(0,l.kt)("inlineCode",{parentName:"p"},"qa_apis")," table via this API. The following fields are required:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(500)"),(0,l.kt)("td",{parentName:"tr",align:null},"Unique identifier for the API")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"API name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"API path")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"method"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP method (GET, POST, etc.)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"create_time"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"Creation timestamp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Creator name (will create a record in accounts table and write creator_id to qa_apis table)")))),(0,l.kt)("h4",{id:"qa_apiscsv-sample"},"qa_apis.csv sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"path"),(0,l.kt)("th",{parentName:"tr",align:null},"method"),(0,l.kt)("th",{parentName:"tr",align:null},"create_time"),(0,l.kt)("th",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("th",{parentName:"tr",align:null},"qa_project_id"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:api:1:101"),(0,l.kt)("td",{parentName:"tr",align:null},"Login API"),(0,l.kt)("td",{parentName:"tr",align:null},"/api/v1/login"),(0,l.kt)("td",{parentName:"tr",align:null},"POST"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-01 10:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"tester1"),(0,l.kt)("td",{parentName:"tr",align:null},"project101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:api:1:102"),(0,l.kt)("td",{parentName:"tr",align:null},"User Info API"),(0,l.kt)("td",{parentName:"tr",align:null},"/api/v1/user/{id}"),(0,l.kt)("td",{parentName:"tr",align:null},"GET"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-01 11:30:00"),(0,l.kt)("td",{parentName:"tr",align:null},"tester2"),(0,l.kt)("td",{parentName:"tr",align:null},"project101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:api:1:103"),(0,l.kt)("td",{parentName:"tr",align:null},"Logout API"),(0,l.kt)("td",{parentName:"tr",align:null},"/api/v1/logout"),(0,l.kt)("td",{parentName:"tr",align:null},"POST"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"tester1"),(0,l.kt)("td",{parentName:"tr",align:null},"project102")))),(0,l.kt)("h3",{id:"upload-qa_test_casescsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"qa_test_cases.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/qa_test_cases.csv")),(0,l.kt)("p",null,"The HTTP ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," must be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have four fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"qaProjectId"),": (max length 500) Will be used as qa_project_id and will create/update a record in qa_projects table"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"qaProjectName"),": (max length 255) Will be written to the ",(0,l.kt)("inlineCode",{parentName:"li"},"name")," field of qa_projects table. Together with qaProjectId, this will create a new record in qa_projects table if not exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Boolean value indicating whether this is an incremental update (true/false)")),(0,l.kt)("p",null,"Upload a CSV file and import it to the ",(0,l.kt)("inlineCode",{parentName:"p"},"qa_test_cases")," table via this API. The following fields are required:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(500)"),(0,l.kt)("td",{parentName:"tr",align:null},"Unique test case ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Test case name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"create_time"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"Creation timestamp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Creator name (will create a record in accounts table and write creator_id to qa_test_cases table)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Test case type, api or functional")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa_api_id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Related API ID, if type is api")))),(0,l.kt)("h4",{id:"qa_test_casescsv-sample"},"qa_test_cases.csv sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"create_time"),(0,l.kt)("th",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"qa_api_id"),(0,l.kt)("th",{parentName:"tr",align:null},"qa_project_id"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:case:1:201"),(0,l.kt)("td",{parentName:"tr",align:null},"Login Test"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-02 09:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"tester1"),(0,l.kt)("td",{parentName:"tr",align:null},"api"),(0,l.kt)("td",{parentName:"tr",align:null},"qa:api:1:101"),(0,l.kt)("td",{parentName:"tr",align:null},"project101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:case:1:202"),(0,l.kt)("td",{parentName:"tr",align:null},"User Profile Test"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-02 10:30:00"),(0,l.kt)("td",{parentName:"tr",align:null},"tester2"),(0,l.kt)("td",{parentName:"tr",align:null},"api"),(0,l.kt)("td",{parentName:"tr",align:null},"qa:api:1:102"),(0,l.kt)("td",{parentName:"tr",align:null},"project101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:case:1:203"),(0,l.kt)("td",{parentName:"tr",align:null},"UI Navigation Test"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-02 11:45:00"),(0,l.kt)("td",{parentName:"tr",align:null},"tester3"),(0,l.kt)("td",{parentName:"tr",align:null},"functional"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"project102")))),(0,l.kt)("h3",{id:"upload-qa_test_case_executionscsv-file"},"Upload ",(0,l.kt)("inlineCode",{parentName:"h3"},"qa_test_case_executions.csv")," file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/csvfiles/qa_test_case_executions.csv")),(0,l.kt)("p",null,"The HTTP ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," must be ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", and the form should have three fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": The CSV file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"qaProjectId"),": It will be used as qa_project_id for the imported data"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"incremental"),": Boolean value indicating whether this is an incremental update (true/false)")),(0,l.kt)("p",null,"Upload a CSV file and import it to the ",(0,l.kt)("inlineCode",{parentName:"p"},"qa_test_case_executions")," table via this API. The following fields are required:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(500)"),(0,l.kt)("td",{parentName:"tr",align:null},"Unique execution ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa_test_case_id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Related test case ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"create_time"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"Creation timestamp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"start_time"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"Test execution start time")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"finish_time"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"Test execution finish time")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Creator name (will create a record in accounts table and write creator_id to qa_test_case_executions table)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"Execution status (PENDING, IN_PROGRESS, SUCCESS, FAILED)")))),(0,l.kt)("h4",{id:"qa_test_case_executionscsv-sample"},"qa_test_case_executions.csv sample:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"qa_test_case_id"),(0,l.kt)("th",{parentName:"tr",align:null},"create_time"),(0,l.kt)("th",{parentName:"tr",align:null},"start_time"),(0,l.kt)("th",{parentName:"tr",align:null},"finish_time"),(0,l.kt)("th",{parentName:"tr",align:null},"creator_name"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"qa_project_id"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:exec:1:301"),(0,l.kt)("td",{parentName:"tr",align:null},"qa:case:1:201"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-03 14:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-03 14:05:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-03 14:15:00"),(0,l.kt)("td",{parentName:"tr",align:null},"tester1"),(0,l.kt)("td",{parentName:"tr",align:null},"SUCCESS"),(0,l.kt)("td",{parentName:"tr",align:null},"project101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:exec:1:302"),(0,l.kt)("td",{parentName:"tr",align:null},"qa:case:1:202"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-03 15:30:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-03 15:35:00"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"tester2"),(0,l.kt)("td",{parentName:"tr",align:null},"IN_PROGRESS"),(0,l.kt)("td",{parentName:"tr",align:null},"project101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"qa:exec:1:303"),(0,l.kt)("td",{parentName:"tr",align:null},"qa:case:1:203"),(0,l.kt)("td",{parentName:"tr",align:null},"2025-07-04 09:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL"),(0,l.kt)("td",{parentName:"tr",align:null},"tester3"),(0,l.kt)("td",{parentName:"tr",align:null},"PENDING"),(0,l.kt)("td",{parentName:"tr",align:null},"project102")))))}s.isMDXComponent=!0}}]);